#ifndef	MBLUR_H
#define MBLUR_H
#include "ogse_config.h"
#include "common.h"
#define MBLUR_CLAMP	float(0.001)
uniform sampler2D s_current;
uniform sampler2D s_previous;
float3 calc_improved_mblur(float2 UV, float3 pos, float3 c_original)	{
	float4 	pos4		= float4	(pos,1.h);
	float4 	p_current	= mul	(m_current,	pos4);
	float4 	p_previous 	= mul	(m_previous,	pos4);
	float2 	p_velocity 	= float2(IMBLUR_SCALE_X,IMBLUR_SCALE_Y)*( p_current.xy/p_current.w - (p_previous.xy/p_previous.w) );
	float VL = length( p_velocity );
	p_velocity	= clamp	(p_velocity,-IMBLUR_CLAMP,+IMBLUR_CLAMP);
	int modif =  IMBLUR_SAMPLES;
	p_velocity = ( VL > IMBLUR_VEL_START )? p_velocity:float2(0,0);
	float3 	blurred = c_original;
	for(int i = 1; i < (modif); UV += p_velocity ,i++) 
		blurred += tex2D(s_image, UV).rgb;
	blurred /= modif;
	float3 distance_soft = (pos.z>IMBLUR_VEL_START && pos.z<IMBLUR_VEL_FIN)
		?(c_original+(blurred-c_original)*(pos.z-IMBLUR_START_DIST)/(IMBLUR_FINAL_DIST-IMBLUR_START_DIST))
		:blurred;
	float3 velocity_soft = (VL>IMBLUR_VEL_START && VL<IMBLUR_VEL_FIN)
		?(c_original+(blurred-c_original)*(VL-IMBLUR_VEL_START)/(IMBLUR_VEL_FIN-IMBLUR_VEL_START))
		:blurred;
	return  (distance_soft + velocity_soft) /2;
}
float3 calc_default_mblur(float2 UV, float3 pos, float3 c_original)	{
//	pos.z += 1000000.h*saturate(0.001 - pos.z);
	float4 	pos4		= float4	(pos,1.h);

	float4 	p_current	= mul	(m_current,	pos4);
	float4 	p_previous 	= mul	(m_previous,	pos4);
	float2 	p_velocity 	= m_blur * ( (p_current.xy/p_current.w)-(p_previous.xy/p_previous.w) );
			p_velocity	= clamp	(p_velocity,-MBLUR_CLAMP,+MBLUR_CLAMP);

	// For each sample, sum up each sample's color in "Blurred" and then divide
	// to average the color after all the samples are added.
	float3 	blurred 	= 	c_original	;
        blurred 	+= 	tex2D(s_current, p_velocity * 1.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 2.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 3.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 4.h  + UV).rgb;
        blurred 	+= 	tex2D(s_current, p_velocity * 5.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 6.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 7.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 8.h  + UV).rgb;
        blurred 	+= 	tex2D(s_current, p_velocity * 9.h  + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 10.h + UV).rgb;
		blurred		+= 	tex2D(s_current, p_velocity * 11.h + UV).rgb; 

	return 	blurred/12;
};
float4 main(combine _in):COLOR0	{
	float3 P = get_xyz_position(_in.tc0);//tex2D(s_position, _in.tc0).xyz;
	float3 I = tex2D(s_current, _in.tc0).xyz;
	float3 final;
	#ifdef USE_IMPROVED_MBLUR
		final = calc_improved_mblur(_in.tc0, P, I);
	#else
		#ifdef USE_MBLUR
			final = calc_default_mblur(_in.tc0, P, I);
		#else 
			final = I;
		#endif
	#endif
	return float4(final, 1.0);

}
#endif