#include "ogse_config.h"
#include "common.h"

uniform sampler2D s_distort;
uniform sampler2D s_sunshafts;
uniform sampler2D s_mblur;
uniform sampler2D s_dof;
uniform half4 		e_barrier;	// x=norm(.8f), y=depth(.1f), z=clr
uniform half4 		e_weights;	// x=norm, y=depth, z=clr
uniform half4 		e_kernel;	// x=norm, y=depth, z=clr
uniform half4 color_grading_params; // xyz - color, w - density
#define EPSDEPTH 0.001
half4 main(combine I):COLOR {

	// Antialiasing
	  // Normal discontinuety filter
	  half3 nc		=  tex2D	(s_normal,   	I.tc0);
	  half4 nd;
		nd.x 		=  dot 		(nc, (half3)tex2D(s_normal,I.tc1));
		nd.y 		=  dot 		(nc, (half3)tex2D(s_normal,I.tc2));
		nd.z 		=  dot 		(nc, (half3)tex2D(s_normal,I.tc3));
		nd.w 		=  dot 		(nc, (half3)tex2D(s_normal,I.tc4));
		nd 		-= e_barrier.x	;
		nd 		=  step		(0,nd);	// bw
	  half  ne 		=  saturate	(dot(nd,e_weights.x));

	  // Opposite coords
	  float4 tc5r 		=  I.tc5.wzyx;
	  float4 tc6r 		=  I.tc6.wzyx;

	  // Depth filter : compute gradiental difference: (c-sample1)+(c-sample1_opposite)
	  half4 dc		=  tex2D 	(s_position, I.tc0); 
	  half4 dd;
		dd.x 		=  (half)tex2D(s_position,I.tc1).z + (half)tex2D(s_position,I.tc2).z;
		dd.y 		=  (half)tex2D(s_position,I.tc3).z + (half)tex2D(s_position,I.tc4).z;
		dd.z 		=  (half)tex2D(s_position,I.tc5).z + (half)tex2D(s_position,tc5r).z;
		dd.w 		=  (half)tex2D(s_position,I.tc6).z + (half)tex2D(s_position,tc6r).z;
		dd 		=  abs(2*dc.z-dd)-e_barrier.y;
		dd 		=  step		(dd,0);		// bw
	  half  de 		=  saturate	(dot(dd,e_weights.y));

	  // weight
	  half 	w 		=  (1-de*ne)*e_kernel.x;	// 0 - no aa, 1=full aa

	#ifdef USE_DISTORT
		half depth=dc.z;
		half4 distort=tex2D(s_distort, I.tc0);
		float2 center=I.tc0+(distort.xy-.5h)*def_distort;
		half depth_x=tex2D (s_position,center).z;
		if ((depth_x+EPSDEPTH)<depth) center=I.tc0;
	#else
		float2 center=I.tc0;
	#endif
	
	  // Smoothed color
	  // (a-c)*w + c = a*w + c(1-w)
	half4 bloom = tex2D(s_bloom,center);
	half2 offset = center * (1-w);
	half4 s0 = tex2D(s_image, offset + I.tc1*w);
	half4 s1 = tex2D(s_image, offset + I.tc2*w);
	half4 s2 = tex2D(s_image, offset + I.tc3*w);
	half4 s3 = tex2D(s_image, offset + I.tc4*w);

	half3 img = (s0 + s1 + s2 + s3) / 4.h;
	
	float3 postprocess = float3(0,0,0);
#ifdef USE_SUNSHAFTS
	postprocess += tex2D(s_sunshafts, center).xyz;
#endif
#ifdef USE_MBLUR
	postprocess += tex2D(s_mblur, center).xyz;
#endif
#ifdef USE_DOF
	postprocess += tex2D(s_dof, center).xyz;
#endif

	img += postprocess;
	
	#ifdef USE_DISTORT
		float3 blurred=bloom*def_hdr;
		img=lerp(img,blurred,distort.z);
	#endif
	
	#ifdef USE_CONTRAST_FILTER
		float3 highcontrast=img.xyz*img.xyz;
		img.xyz=lerp(img.xyz,highcontrast,CONTRAST_FILTER_COEF);
	#endif
	
	return combine_bloom(img,bloom);
}